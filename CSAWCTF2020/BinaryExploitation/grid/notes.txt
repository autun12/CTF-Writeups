
void draw_shape(char *shape) {
  int local_88;
  int local_84;
  char *local_80;
  char acStack120 [104];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_80 = param_1;
  while (local_80 != NULL) {
    acStack120[(long)(int)(uint)(byte)local_80[2] + (long)(int)(uint)(byte)local_80[1] * 10] = *local_80;
    local_80 = *(char **)(local_80 + 8);
  }
  std::cout << "Displaying\n";
  local_88 = 0;
  while (local_88 < 10) {
    local_84 = 0;
    while (local_84 < 10) {
      std::cout << acStack120[(long)local_84 + (long)local_88 * 10];
      local_84 = local_84 + 1;
    }
    std::cout << "\n";
    local_88 = local_88 + 1;
  }

  return;
}

void choose_shape_and_location(void) {
  char *pcVar1;
  char our_input;
  int x;
  int y;
  int local_3c;
  char *local_30;
  char *local_28;
  long local_20;
  
  our_input = '+';
  x = 0;
  y = 0;
  std::string local_38(0x10);
  FUN_00400e1e(local_38,0x2b,0,0);
  local_3c = 0;
  local_30 = local_38;
  while (local_3c < 100) {
    std::cout << "shape> ";
    std::cin >> &our_input;
    if (our_input == 'd') {
      FUN_00400a57();
      draw_shape(local_30);
    } else {
      std::cout << "loc> ";
      std::cin >> &x;
      std::cin >> &y;
      std::cout << "placing " << our_input << " at " << x << ", " << y << std::endl;
      pcVar1 = (char *)operator.new(0x10);
      FUN_00400e1e(pcVar1,our_input,(char)x,(char)y);
      local_28 = pcVar1;
      FUN_00400e62((long)local_38,pcVar1);
      local_38 = local_28;
    }
    local_3c = local_3c + 1;
  }
  return;
}

